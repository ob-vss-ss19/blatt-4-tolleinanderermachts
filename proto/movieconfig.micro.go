// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: movieconfig.proto

package movieconfig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MovieControl service

type MovieControlService interface {
	AddMovie(ctx context.Context, in *AddMovieRequest, opts ...client.CallOption) (*RequestResponse, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...client.CallOption) (*RequestResponse, error)
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...client.CallOption) (*GetMovieResponse, error)
}

type movieControlService struct {
	c    client.Client
	name string
}

func NewMovieControlService(name string, c client.Client) MovieControlService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "moviecontrol"
	}
	return &movieControlService{
		c:    c,
		name: name,
	}
}

func (c *movieControlService) AddMovie(ctx context.Context, in *AddMovieRequest, opts ...client.CallOption) (*RequestResponse, error) {
	req := c.c.NewRequest(c.name, "MovieControl.AddMovie", in)
	out := new(RequestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieControlService) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...client.CallOption) (*RequestResponse, error) {
	req := c.c.NewRequest(c.name, "MovieControl.DeleteMovie", in)
	out := new(RequestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieControlService) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...client.CallOption) (*GetMovieResponse, error) {
	req := c.c.NewRequest(c.name, "MovieControl.GetMovie", in)
	out := new(GetMovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MovieControl service

type MovieControlHandler interface {
	AddMovie(context.Context, *AddMovieRequest, *RequestResponse) error
	DeleteMovie(context.Context, *DeleteMovieRequest, *RequestResponse) error
	GetMovie(context.Context, *GetMovieRequest, *GetMovieResponse) error
}

func RegisterMovieControlHandler(s server.Server, hdlr MovieControlHandler, opts ...server.HandlerOption) error {
	type movieControl interface {
		AddMovie(ctx context.Context, in *AddMovieRequest, out *RequestResponse) error
		DeleteMovie(ctx context.Context, in *DeleteMovieRequest, out *RequestResponse) error
		GetMovie(ctx context.Context, in *GetMovieRequest, out *GetMovieResponse) error
	}
	type MovieControl struct {
		movieControl
	}
	h := &movieControlHandler{hdlr}
	return s.Handle(s.NewHandler(&MovieControl{h}, opts...))
}

type movieControlHandler struct {
	MovieControlHandler
}

func (h *movieControlHandler) AddMovie(ctx context.Context, in *AddMovieRequest, out *RequestResponse) error {
	return h.MovieControlHandler.AddMovie(ctx, in, out)
}

func (h *movieControlHandler) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, out *RequestResponse) error {
	return h.MovieControlHandler.DeleteMovie(ctx, in, out)
}

func (h *movieControlHandler) GetMovie(ctx context.Context, in *GetMovieRequest, out *GetMovieResponse) error {
	return h.MovieControlHandler.GetMovie(ctx, in, out)
}
